const { binarySearch } = require("./Binary Search/BinarySearch")
const { bogoSort } = require("./BogoSort/BogoSort")
const { bucketSort } = require("./Bucket Sort/BucketSort")
const { countingSort } = require("./Counting Sort/CountingSort")
const { Tree } = require("./Fun with trees/tree")
const { Heap } = require("./Heap/Heap")
const { insertionSort } = require("./Insertion Sort/InsertionSort")
const { linearSearch } = require("./Linear Search/LinearSearch")
const { mergeSort } = require("./Merge Sort/MergeSort")
const { pidgeonHoleSort } = require("./PidgeonHole Sort/PidgeonHoleSort")
const { quickSort } = require("./Quick Sort/QuickSort")
const { selectionSort } = require("./Selection sort/SelectionSort")
const { runSort, runNotInPlaceSort, randomArray, randomValueInsideArray, runSearch } = require("./_Miscellaneous/misc")

console.log("==== SORTING ====")
console.log("Inserion Sort O(n^2)")
runSort(512000, insertionSort)
console.log("Selection Sort O(n^2)")
runSort(512000, selectionSort)
console.log("Merge Sort 𝚯(nlog(n))")
runNotInPlaceSort(1024000, mergeSort)
console.log("Quick Sort 𝚯(nlog(n)) | O(n^2)")
runSort(1024000, quickSort)
console.log("Heap Sort 𝚯(nlog(n))")
runNotInPlaceSort(128000, Heap.heapSort)
console.log("PidgeonHole Sort O(n)")
runSort(10000000, pidgeonHoleSort)
console.log("Bucket Sort O(n)")
runSort(10000000, bucketSort)
console.log("Counting Sort O(n)")
runSort(10000000, countingSort)
console.log("BogoSort O(n!)")
runSort(10, bogoSort, 50)
console.log("==== SEARCHING ====")
let a = randomArray(512000, 512000)
let key = randomValueInsideArray(a)
console.log("Linear Search O(n)")
runSearch(a, key, linearSearch)
a = randomArray(1024000, 1024000)
key = randomValueInsideArray(a)
quickSort(a)
console.log("Binary Search O(log(n))")
runSearch(a, key, binarySearch)
console.log("==== TREES ====")
let tree = new Tree(10, 5, false)
Tree.map(tree, (x) => {return x*2})
console.log("Sum:" + Tree.reduce(tree, (x) => {return x}))
let max = Tree.max(tree)
console.log("Max:" + max)
let min = Tree.min(tree)
console.log("Min:" + min)
console.log("Search:" + Tree.search(max))
console.log(`Path from ${max} to ${min}: ` + Tree.printPath(Tree.pathFromXtoY(tree, max, min)))


